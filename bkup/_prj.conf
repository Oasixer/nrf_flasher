# Added for flasher: ------------------------------------------------------------------

# ///////////////////// nrf52dk_nrf52832.conf ///////////
# Disable Bluetooth PHY update support
CONFIG_BT_USER_PHY_UPDATE=n
CONFIG_BT_PHY_UPDATE=n
# ////////////////////// prj.conf //////////////////////

CONFIG_NET_BUF=y
CONFIG_ZCBOR=y
CONFIG_CRC=y
CONFIG_MCUMGR=y
CONFIG_STREAM_FLASH=y
CONFIG_FLASH_MAP=y

# Some command handlers require a large stack.
CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE=2304
CONFIG_MAIN_STACK_SIZE=2048

# Ensure an MCUboot-compatible binary is generated.
CONFIG_BOOTLOADER_MCUBOOT=y

# Enable flash operations.
CONFIG_FLASH=y

# Required by the `taskstat` command.
CONFIG_THREAD_MONITOR=y

# Support for taskstat command
CONFIG_MCUMGR_GRP_OS_TASKSTAT=y

# Enable statistics and statistic names.
CONFIG_STATS=y
CONFIG_STATS_NAMES=y

# Enable most core commands.
CONFIG_FLASH=y
CONFIG_IMG_MANAGER=y
CONFIG_MCUMGR_GRP_IMG=y
CONFIG_MCUMGR_GRP_OS=y
CONFIG_MCUMGR_GRP_STAT=y

# Enable logging
CONFIG_LOG=y
CONFIG_MCUBOOT_UTIL_LOG_LEVEL_WRN=y

# Disable debug logging
CONFIG_LOG_MAX_LEVEL=3

# ////////////////////// overlay-bt.conf //////////////////////
CONFIG_BT=y
CONFIG_BT_PERIPHERAL=y

# Allow for large Bluetooth data packets.
CONFIG_BT_L2CAP_TX_MTU=498
CONFIG_BT_BUF_ACL_RX_SIZE=502
CONFIG_BT_BUF_ACL_TX_SIZE=502
CONFIG_BT_CTLR_DATA_LENGTH_MAX=251

#-DEXTRA_CONF_FILE=overlay-bt.conf
# Enable the Bluetooth mcumgr transport (unauthenticated).
CONFIG_MCUMGR_TRANSPORT_BT=y
CONFIG_MCUMGR_TRANSPORT_BT_AUTHEN=n
CONFIG_MCUMGR_TRANSPORT_BT_CONN_PARAM_CONTROL=y

CONFIG_BT_DEVICE_NAME="mcumgr"
# CONFIG_BT_DEVICE_NAME="Tab_0016"

# Enable the Shell mcumgr transport.
CONFIG_BASE64=y
CONFIG_SHELL=y
CONFIG_SHELL_BACKEND_SERIAL=y
CONFIG_MCUMGR_TRANSPORT_SHELL=y

# Enable the mcumgr Packet Reassembly feature over Bluetooth and its configuration dependencies.
# MCUmgr buffer size is optimized to fit one SMP packet divided into five Bluetooth Write Commands,
# transmitted with the maximum possible MTU value: 498 bytes.
CONFIG_MCUMGR_TRANSPORT_BT_REASSEMBLY=y
CONFIG_MCUMGR_TRANSPORT_NETBUF_SIZE=2475
CONFIG_MCUMGR_GRP_OS_MCUMGR_PARAMS=y
CONFIG_MCUMGR_TRANSPORT_WORKQUEUE_STACK_SIZE=4608

# Enable the LittleFS file system.
CONFIG_FILE_SYSTEM=y
CONFIG_FILE_SYSTEM_LITTLEFS=y

# Enable file system commands
CONFIG_MCUMGR_GRP_FS=y

# Enable the storage erase command.
CONFIG_MCUMGR_GRP_ZBASIC=y
CONFIG_MCUMGR_GRP_ZBASIC_STORAGE_ERASE=y

# Disable Bluetooth ping support
CONFIG_BT_CTLR_LE_PING=n

# Disable shell commands that are not needed
CONFIG_CLOCK_CONTROL_NRF_SHELL=n
CONFIG_DEVICE_SHELL=n
CONFIG_DEVMEM_SHELL=n
CONFIG_FLASH_SHELL=n


# /////////////////////////////////////////////////////////////



# Removed for flasher: ----------------------------------------------------------------------------------------------
# CONFIG_SOC_SERIES_NRF52X=y
# CONFIG_SOC_NRF52840_QFAA=y
# CONFIG_MAIN_STACK_SIZE=4096
# CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE=4096
# CONFIG_NRFX_PDM=y # Enable PDM Driver, https://docs.zephyrproject.org/2.7.5/reference/kconfig/CONFIG_NRFX_PDM.html#std-kconfig-CONFIG_NRFX_PDM
# CONFIG_ADC=y
# CONFIG_ADC_ASYNC=y
# CONFIG_ADC_NRFX_SAADC=y
# CONFIG_BT_L2CAP_TX_BUF_COUNT=255
# CONFIG_BT_L2CAP_TX_MTU=247
# CONFIG_BT_L2CAP_RX_MTU=247
# CONFIG_BT_BUF_ACL_TX_SIZE=251

# CONFIG_BT_ATT_PREPARE_COUNT=2
# CONFIG_BT_CONN_TX_MAX=255
# CONFIG_BT_BUF_ACL_RX_SIZE=251
# The LC3 codec uses a large amount of stack. This app runs the codec in the work-queue, hence
# inctease stack size for that thread.
# CONFIG_FPU=y
# LC3 lib requires floating point support in the c-lib NEWLIB is one way of getting that.
# CONFIG_NEWLIB_LIBC=y
# CONFIG_LIBLC3=y

# SHOULD THIS BE DISABLED???????????????????
# WHY DID WE HAVE THIS ON WHEN NOT USING SMP? then the actual smp server doesnt use it??? lol
# CONFIG_BT_SMP=y
# -------------------------------------------------

# CONFIG_SOC_SERIES_NRF52X=y
# CONFIG_SOC_NRF52840_QFAA=y

# Enable MPU
# CONFIG_ARM_MPU=y

# default to dbg level
CONFIG_LOG_DEFAULT_LEVEL=3
CONFIG_BT_HCI_CORE_LOG_LEVEL_WRN=y
CONFIG_BT_HCI_DRIVER_LOG_LEVEL_WRN=y
# CONFIG_BT_HCI_CORE_LOG_LEVEL=2 # doesnt work
# CONFIG_BT_LOG_LEVEL=3 # doesnt work

# Enable hardware stack protection
# pretty sure the arch doesn't support this tho due to an error when building with this on
# CONFIG_HW_STACK_PROTECTION=y

# enable GPIO
CONFIG_GPIO=y

CONFIG_PWM=y


# ---------------------- console related -------------
# Logger gets compiled out unless this is enabled
# set this from board file instead of from here!
# CONFIG_LOG=n
# Enable RTT - set this from board file instead of here!
# CONFIG_USE_SEGGER_RTT=y

# not sure if this works
# CONFIG_PRINTK=y

# enable STDOUT as early as possible for debugging accuracy
CONFIG_EARLY_CONSOLE=y

# CONFIG_LOG_BLOCK_IN_THREAD=y
# CONFIG_LOG_IMMEDIATE=y
# When enabled log is processed in the context of the call. It impacts performance of the system since time consuming operations are performed in the context of the log entry (e.g. high priority interrupt).Logger backends must support exclusive access to work flawlessly in that mode because one log operation can be interrupted by another one in the higher priority context.
CONFIG_LOG_MODE_IMMEDIATE=y

# CONFIG_SHELL_BACKEND_RTT_LOG_MESSAGE_QUEUE_SIZE=16
CONFIG_LOG_MODE_DEFERRED=n

# # enable uart driver
# CONFIG_SERIAL=y
# -----------------------------------------------------

# # enable console
# CONFIG_CONSOLE=y
# CONFIG_UART_CONSOLE=y

CONFIG_PINCTRL=y

# Not sure if we need this
# CONFIG_TIMING_FUNCTIONS=y

# Clock related --------------------------------------
# Not sure if we need this
CONFIG_CLOCK_CONTROL=y

# avoid nrf LF 32.768 xtal clock
# When this is off, k_msleep() no worky
# Due to something about the RC Oscillator,
CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC=y
# Not sure if these 3 options are also needed, so far not but whatever
# CONFIG_CLOCK_CONTROL_NRF_K32SRC_500PPM=y
# CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_LF_ALWAYS_ON=y
# CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION=y
# -----------------------------------------------------------

# CONFIG_ADC=y
# CONFIG_ADC_ASYNC=y
# CONFIG_ADC_NRFX_SAADC=y

# Fix issue where breakpoints no worky
# and we only end up in reset.s when debugging
CONFIG_DEBUG_OPTIMIZATIONS=y
# This also fixes the above issue, but breaks other stuff...
# CONFIG_NO_OPTIMIZATIONS=y

# CONFIG_ISR_STACK_SIZE=2048
# CONFIG_MAIN_STACK_SIZE=4096

# no idea if should be on or not
CONFIG_DYNAMIC_INTERRUPTS=n
CONFIG_IRQ_OFFLOAD=n

# CONFIG_SPM=y

# AUDIO ----------------------------------------------------------------------------------
# Enable PDM?
# should be selected automatically by CONFIG_AUDIO_DMIC_NRFX_PDM
# CONFIG_NRFX_PDM=y # Enable PDM Driver, https://docs.zephyrproject.org/2.7.5/reference/kconfig/CONFIG_NRFX_PDM.html#std-kconfig-CONFIG_NRFX_PDM

# nRF PDM nrfx driver
# CONFIG_AUDIO=y
# CONFIG_AUDIO_DMIC=y


# # The LC3 codec uses a large amount of stack. This app runs the codec in the work-queue, hence
# # inctease stack size for that thread.
# CONFIG_FPU=y
# # LC3 lib requires floating point support in the c-lib NEWLIB is one way of getting that.
# CONFIG_NEWLIB_LIBC=y
# CONFIG_LIBLC3=y

# The LC3 codec uses a large amount of stack. This app runs the codec in the work-queue,
# increase stack size for that thread.
# CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE=4096

# -------------------------------------------------------------------
# CONFIG_BT=y
# CONFIG_BT_SMP=y # This option enables support for the Security Manager Protocol
	            # (SMP), making it possible to pair devices over LE.
# CONFIG_BT_DEBUG_LOG=y
# CONFIG_BT_PERIPHERAL=y

# apparently this ALSO fixes the crash??? lets see if it stays that way
# CONFIG_BT_SMP=y
# turning these on for a test
# CONFIG_BT_AUDIO=y
# for some reason this fixes the crash........
# CONFIG_BT_BAP_UNICAST_SERVER=y


# https://docs.zephyrproject.org/latest/kconfig.html#CONFIG_BT_BAP_UNICAST_SERVER
# selects:
# CONFIG_EXPERIMENTAL=y
# CONFIG_BT_PERIPHERAL=y
# CONFIG_BT_BAP_UNICAST=y # cant set manually
# CONFIG_BT_ISO_PERIPHERAL=y

# weird internal error when compiling with this on,
# i guess it only works when CONFIG_BT_BAP_UNICAST_SERVER is on,
# perhaps a side effect of one of the other options like BT_BAP_UNICAST
# CONFIG_BT_ASCS=y
# with these two on, still crashes
# CONFIG_BT_GATT_DYNAMIC_DB=y
# CONFIG_BT_GATT_CACHING=y


# CONFIG_BT_HRS=y

# I could have sworn that this fixed some issue with bluetooth tx speed ages ago.
# but as of may2024 
# CONFIG_BT_GATT_AUTO_UPDATE_MTU=y

# 0-64, try this!
# CONFIG_BT_ATT_PREPARE_COUNT=2
# CONFIG_BT_CONN_TX_MAX=255
# CONFIG_BT_L2CAP_TX_BUF_COUNT=255
# CONFIG_BT_L2CAP_TX_MTU=247
# CONFIG_BT_L2CAP_RX_MTU=247
# CONFIG_BT_BUF_ACL_TX_SIZE=251
# CONFIG_BT_CTLR_DATA_LENGTH_MAX=251
# CONFIG_BT_L2CAP_DYNAMIC_CHANNEL=y

# no idea why i have to set this... maybe experiment and confirm?
# CONFIG_BT_BUF_ACL_RX_SIZE=251
# CONFIG_BT_BUF_ACL_RX_COUNT=64
#CONFIG_BT_ASCS_ASE_SNK_COUNT=0
#CONFIG_BT_ASCS_ASE_SRC_COUNT=1
#
## Number of buffers available for outgoing Isochronous channel SDUs.
#CONFIG_BT_ISO_TX_BUF_COUNT=2
#
## number of ISO Tx PDUs to be queued for transmission
## (should this be 4 to match presentation delay 40ms and 10ms frames?)
#CONFIG_BT_CTLR_ISO_TX_BUFFERS=2 
#
## Supports the highest SDU size required by any BAP LC3 presets (155)
#CONFIG_BT_CTLR_ISO_TX_BUFFER_SIZE=155
#
## Must support an ISO channel per ASE
#CONFIG_BT_ISO_MAX_CHAN=1
#
#CONFIG_BT_CTLR_PERIPHERAL_ISO=y
#
#
## Mandatory to support at least 1 for ASCS.
# CONFIG_BT_ATT_PREPARE_COUNT=1
CONFIG_BT_GATT_ENFORCE_SUBSCRIPTION=n
#
##  Select this to enable Extended Advertising API support.
## This enables support for advertising with multiple advertising sets,
## extended advertising data, and advertising on LE Coded PHY
# CONFIG_BT_EXT_ADV=y
#CONFIG_BT_CTLR_ADV_DATA_LEN_MAX=191
#
# CONFIG_BT_DEVICE_APPEARANCE=833
## no idea why 833
#
#CONFIG_BT_CTLR_ISO_TX_BUFFER_SIZE=155
#CONFIG_BT_CTLR_ISOAL_SOURCES=1
#
## for some reason cant be set to 0
#CONFIG_BT_CTLR_ISOAL_SINKS=1
#
## Use the below if the sample is sending stale packet sequence number
## CONFIG_BT_CTLR_ADVANCED_FEATURES=y
## CONFIG_BT_CTLR_ISOAL_SN_STRICT=n